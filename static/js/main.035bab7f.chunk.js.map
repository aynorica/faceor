{"version":3,"sources":["components/Logo/logo.png","containers/reducers.js","components/FaceRecognition/FaceRecognition.js","components/Navigation/Navigation.js","components/Signin/Signin.js","containers/actions.js","containers/constants.js","components/Register/Register.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","initialStateInput","input","initialImageURLState","imageUrl","initialBoxState","box","initialStateUser","user","id","name","email","entries","joined","initialSignInState","signInEmail","signInPassword","initialRegisterState","password","FaceRecognition","className","alt","src","width","height","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Navigation","onRouteChange","isSignedIn","display","justifyContent","onClick","Signin","onSubmitSignIn","props","loadUser","fetch","method","headers","body","JSON","stringify","then","response","json","this","onEmailChange","onPasswordChange","htmlFor","type","onChange","value","React","Component","connect","state","signInInfo","dispatch","event","payload","target","Register","onNameChange","registerInfo","Logo","options","max","paddingTop","logo","ImageLinkForm","onInputChange","onButtonSubmit","Rank","particlesOptions","particles","number","density","enable","value_area","initialState","route","App","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","onImageURLChange","setBoxDetails","count","setState","Object","assign","catch","console","log","err","params","inputLoad","imageUrlLoad","boxDetails","userInfo","text","setImageUrlLoad","object","userObject","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.035bab7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8923d8fb.png\";","import { ON_INPUT_CHANGE,\r\n        LOAD_IMAGE_URL,\r\n        BOX_DETAILS,\r\n        LOAD_USER_INFO,\r\n        CHANGE_SIGNIN_EMAIL,\r\n        CHANGE_SIGNIN_PASSWORD,\r\n        CHANGE_REGISTER_EMAIL,\r\n        CHANGE_REGISTER_NAME,\r\n        CHANGE_REGISTER_PASSWORD\r\n} from './constants';\r\n\r\nconst initialStateInput ={\r\n    input: '',\r\n};\r\n\r\nexport const inputLoad = (state= initialStateInput, action={}) => {\r\n    switch (action.type) {\r\n        case ON_INPUT_CHANGE:\r\n            return Object.assign({}, state, {input: action.payload});\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nconst initialImageURLState = {\r\n    imageUrl: ''\r\n};\r\n\r\nexport const imageUrlLoad = (state=initialImageURLState, action={}) => {\r\n    switch (action.type) {\r\n        case LOAD_IMAGE_URL:\r\n            return Object.assign({}, state, {imageUrl: action.payload});\r\n        default:\r\n            return state;\r\n\r\n    }\r\n};\r\n\r\nconst initialBoxState = {\r\n    box: {}\r\n};\r\n\r\nexport const boxDetails = (state=initialBoxState, action={}) => {\r\n    switch (action.type) {\r\n        case BOX_DETAILS:\r\n            return Object.assign({}, state, {box: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialStateUser = {\r\n    user: {\r\n        id: '',\r\n        name: '',\r\n        email: '',\r\n        entries: '',\r\n        joined: ''\r\n\r\n    }\r\n};\r\n\r\nexport const userInfo = (state=initialStateUser, action={}) => {\r\n    switch (action.type) {\r\n        case LOAD_USER_INFO:\r\n            return Object.assign({}, state, {user: action.payload});\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nconst initialSignInState = {\r\n    signInEmail: '',\r\n    signInPassword: ''\r\n};\r\n\r\nexport const signInInfo = (state=initialSignInState, action={}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SIGNIN_EMAIL:\r\n            return Object.assign({}, state, {signInEmail: action.payload});\r\n        case CHANGE_SIGNIN_PASSWORD:\r\n            return Object.assign({}, state, {signInPassword: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialRegisterState = {\r\n    email: '',\r\n    password: '',\r\n    name: ''\r\n};\r\n\r\nexport const registerInfo = (state=initialRegisterState, action={}) => {\r\n    switch (action.type) {\r\n        case CHANGE_REGISTER_EMAIL:\r\n            return Object.assign({}, state, {email: action.payload});\r\n        case CHANGE_REGISTER_PASSWORD:\r\n            return Object.assign({}, state, {password: action.payload});\r\n        case CHANGE_REGISTER_NAME:\r\n            return Object.assign({}, state, {name: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({ imageUrl, box }) => {\r\n    return (\r\n        <div className='center ma'>\r\n            <div className='absolute mt2'>\r\n                <img id='inputimage' alt='' src={imageUrl} width='500px' height='auto'/>\r\n                <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FaceRecognition;\r\n\r\n","import React from 'react';\r\n\r\nconst Navigation = ({ onRouteChange, isSignedIn }) => {\r\n    if (isSignedIn) {\r\n        return (\r\n            <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                <p onClick={() => onRouteChange('signout')} className='f3 link dim black underline pa3 pointer'>Sign Out</p>\r\n            </nav>\r\n        );\r\n    } else {\r\n        return (\r\n            <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                <p onClick={() => onRouteChange('signin')} className='f3 link dim black underline pa3 pointer'>Sign In</p>\r\n                <p onClick={() => onRouteChange('register')} className='f3 link dim black underline pa3 pointer'>Register</p>\r\n            </nav>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Navigation;\r\n\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadSignInEmail, loadSignInPassword } from '../../containers/actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        signInEmail: state.signInInfo.signInEmail,\r\n        signInPassword: state.signInInfo.signInPassword\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onEmailChange: (event) => dispatch(loadSignInEmail(event.target.value)),\r\n        onPasswordChange: (event) => dispatch(loadSignInPassword(event.target.value))\r\n    }\r\n};\r\n\r\nclass Signin extends React.Component {\r\n    onSubmitSignIn = () => {\r\n        const { signInEmail, signInPassword, loadUser, onRouteChange } = this.props;\r\n        fetch('https://damp-retreat-33615.herokuapp.com/signin', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                email: signInEmail,\r\n                password: signInPassword\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(user => {\r\n                if (user.id) {\r\n                    loadUser(user);\r\n                    onRouteChange('home');\r\n                }\r\n            })\r\n    };\r\n\r\n    render() {\r\n        const { onRouteChange, onEmailChange, onPasswordChange } = this.props;\r\n        return (\r\n            <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n                <main className=\"pa4 black-80\">\r\n                    <div className=\"measure\">\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                            <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n                            <div className=\"mt3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                                <input\r\n                                    className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                                    type=\"email\"\r\n                                    name=\"email-address\"\r\n                                    id=\"email-address\"\r\n                                    onChange={onEmailChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"mv3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                                <input\r\n                                    className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    id=\"password\"\r\n                                    onChange={onPasswordChange}\r\n                                />\r\n                            </div>\r\n                        </fieldset>\r\n                        <div>\r\n                            <input\r\n                                onClick={this.onSubmitSignIn}\r\n                                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                                type=\"submit\"\r\n                                value=\"Sign in\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"lh-copy mt3\">\r\n                            <p  onClick={() => onRouteChange('register')} className=\"f6 link dim black db pointer\">Register</p>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </article>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Signin);","import { ON_INPUT_CHANGE,\r\n        LOAD_IMAGE_URL,\r\n        BOX_DETAILS,\r\n        LOAD_USER_INFO,\r\n        CHANGE_SIGNIN_EMAIL,\r\n        CHANGE_SIGNIN_PASSWORD,\r\n        CHANGE_REGISTER_EMAIL,\r\n        CHANGE_REGISTER_PASSWORD,\r\n        CHANGE_REGISTER_NAME\r\n} from './constants';\r\n\r\nexport const inputLoad = (text) => ({\r\n    type: ON_INPUT_CHANGE,\r\n    payload: text\r\n});\r\n\r\nexport const setImageUrlLoad = (text) => ({\r\n    type: LOAD_IMAGE_URL,\r\n    payload: text\r\n});\r\n\r\nexport const setBoxDetails = (object) => ({\r\n    type: BOX_DETAILS,\r\n    payload: object\r\n});\r\n\r\nexport const loadUserInfo = (data) => ({\r\n    type: LOAD_USER_INFO,\r\n    payload: data\r\n});\r\n\r\nexport const loadSignInEmail = (data) => ({\r\n    type: CHANGE_SIGNIN_EMAIL,\r\n    payload: data\r\n});\r\n\r\nexport const loadSignInPassword = (data) => ({\r\n    type: CHANGE_SIGNIN_PASSWORD,\r\n    payload: data\r\n});\r\n\r\nexport const loadRegisterEmail = (data) => ({\r\n    type: CHANGE_REGISTER_EMAIL,\r\n    payload: data\r\n});\r\n\r\nexport const loadRegisterPassword = (data) => ({\r\n    type: CHANGE_REGISTER_PASSWORD,\r\n    payload: data\r\n});\r\n\r\nexport const loadRegisterName = (data) => ({\r\n    type: CHANGE_REGISTER_NAME,\r\n    payload: data\r\n});","export const ON_INPUT_CHANGE = 'ON_INPUT_CHANGE';\r\nexport const LOAD_IMAGE_URL = 'LOAD_IMAGE_URL';\r\nexport const BOX_DETAILS = 'BOX_DETAILS';\r\nexport const LOAD_USER_INFO = 'LOAD_USER_INFO';\r\nexport const CHANGE_SIGNIN_EMAIL = 'CHANGE_SIGNIN_EMAIL';\r\nexport const CHANGE_SIGNIN_PASSWORD = 'CHANGE_SIGNIN_PASSWORD';\r\nexport const CHANGE_REGISTER_EMAIL = 'CHANGE_REGISTER_EMAIL';\r\nexport const CHANGE_REGISTER_PASSWORD = 'CHANGE_REGISTER_PASSWORD';\r\nexport const CHANGE_REGISTER_NAME = 'CHANGE_REGISTER_NAME';\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadRegisterEmail, loadRegisterPassword, loadRegisterName } from \"../../containers/actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        email: state.registerInfo.email,\r\n        password: state.registerInfo.password,\r\n        name: state.registerInfo.name\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onNameChange: (event) => dispatch(loadRegisterName(event.target.value)),\r\n        onEmailChange: (event) => dispatch(loadRegisterEmail(event.target.value)),\r\n        onPasswordChange: (event) => dispatch(loadRegisterPassword(event.target.value))\r\n    }\r\n};\r\n\r\nclass Register extends React.Component {\r\n\r\n    onSubmitSignIn = () => {\r\n        const { email, password, name, loadUser, onRouteChange } = this.props;\r\n        fetch('https://damp-retreat-33615.herokuapp.com/register', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password,\r\n                name: name\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(user => {\r\n                if (user.id) {\r\n                    loadUser(user);\r\n                    onRouteChange('home');\r\n                }\r\n            })\r\n    };\r\n\r\n    render() {\r\n        const { onNameChange, onEmailChange, onPasswordChange } = this.props;\r\n        return (\r\n            <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n                <main className=\"pa4 black-80\">\r\n                    <div className=\"measure\">\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                            <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n                            <div className=\"mt3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                                <input\r\n                                    className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    id=\"name\"\r\n                                    onChange={onNameChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"mt3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                                <input\r\n                                    className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                                    type=\"email\"\r\n                                    name=\"email-address\"\r\n                                    id=\"email-address\"\r\n                                    onChange={onEmailChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"mv3\">\r\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                                <input\r\n                                    className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    id=\"password\"\r\n                                    onChange={onPasswordChange}\r\n                                />\r\n                            </div>\r\n                        </fieldset>\r\n                        <div className=\"\">\r\n                            <input\r\n                                onClick={this.onSubmitSignIn}\r\n                                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                                type=\"submit\"\r\n                                value=\"Register\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </article>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport logo from './logo.png';\r\nimport './Logo.css';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className='ma4 mt0'>\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 55 }} style={{ height: 150, width: 150 }} >\r\n                <div className=\"Tilt-inner pa3\">\r\n                    <img style={{paddingTop: '5px'}} alt='logo' src={logo}/>\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\r\n    return (\r\n        <div>\r\n            <p className='f3'>\r\n                {'This Magic Brain will detect faces in your pictures. Git it a try.'}\r\n            </p>\r\n            <div className='center'>\r\n                <div className='form center pa4 br3 shadow-5'>\r\n                    <input className='f4 pa2 w-70 center form' type='tex' onChange={onInputChange}/>\r\n                    <button\r\n                        className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\r\n                        onClick={onButtonSubmit}\r\n                    >Detect</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\nconst Rank = ({ name, entries }) => {\r\n    return (\r\n        <div>\r\n            <div className='white f3'>\r\n                {`${name}, your current entry count is...`}\r\n            </div>\r\n            <div className='white f1'>\r\n                {entries}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Rank;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {setImageUrlLoad, inputLoad, setBoxDetails, loadUserInfo} from './actions';\r\nimport Particles from 'react-particles-js';\r\nimport FaceRecognition from '../components/FaceRecognition/FaceRecognition';\r\nimport Navigation from '../components/Navigation/Navigation';\r\nimport Signin from '../components/Signin/Signin';\r\nimport Register from '../components/Register/Register';\r\nimport Logo from '../components/Logo/Logo';\r\nimport ImageLinkForm from '../components/ImageLinkForm/ImageLinkForm';\r\nimport Rank from '../components/Rank/Rank';\r\nimport './App.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        input: state.inputLoad.input,\r\n        imageUrl: state.imageUrlLoad.imageUrl,\r\n        box: state.boxDetails.box,\r\n        user: state.userInfo.user\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onInputChange: (event) => dispatch(inputLoad(event.target.value)),\r\n        onImageURLChange: (text) => dispatch(setImageUrlLoad(text)),\r\n        setBoxDetails: (object) => dispatch(setBoxDetails(object)),\r\n        loadUser: (userObject) => dispatch(loadUserInfo(userObject))\r\n    }\r\n};\r\n\r\nconst particlesOptions = {\r\n    particles: {\r\n        number: {\r\n            value: 30,\r\n            density: {\r\n                enable: true,\r\n                value_area: 800\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst initialState = {\r\n    route: 'signin',\r\n    isSignedIn: false,\r\n};\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = initialState;\r\n    }\r\n\r\n\r\n\r\n\r\n    calculateFaceLocation = (data) => {\r\n        const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n        const image = document.getElementById('inputimage');\r\n        const width = Number(image.width);\r\n        const height = Number(image.height);\r\n        return {\r\n            leftCol: clarifaiFace.left_col * width,\r\n            topRow: clarifaiFace.top_row * height,\r\n            rightCol: width - (clarifaiFace.right_col * width),\r\n            bottomRow: height - (clarifaiFace.bottom_row * height)\r\n        }\r\n    };\r\n\r\n    onButtonSubmit = () => {\r\n        const { input, user, onImageURLChange, setBoxDetails } = this.props;\r\n        onImageURLChange(input);\r\n\r\n            fetch('https://damp-retreat-33615.herokuapp.com/imageurl', {\r\n                method: 'post',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    input: input\r\n                })\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response) {\r\n                    fetch('https://damp-retreat-33615.herokuapp.com/image', {\r\n                        method: 'put',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        body: JSON.stringify({\r\n                            id: user.id\r\n                        })\r\n                    })\r\n                        .then(response => response.json())\r\n                        .then(count => {\r\n                            this.setState(Object.assign(user, { entries: count}))\r\n                        })\r\n                        .catch(console.log);\r\n\r\n                }\r\n                setBoxDetails(this.calculateFaceLocation(response))\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    onRouteChange = (route) => {\r\n        if (route === 'signout') {\r\n            this.setState(initialState)\r\n        } else if (route === 'home') {\r\n            this.setState({isSignedIn: true})\r\n        }\r\n        this.setState({route: route});\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        const { isSignedIn, route } = this.state;\r\n        const { user, onInputChange, box, imageUrl, loadUser } = this.props;\r\n        return (\r\n            <div className=\"App\">\r\n                <Particles className='particles'\r\n                           params={particlesOptions}\r\n                />\r\n                <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange} />\r\n                { route === 'home'\r\n                    ? <div>\r\n                        <Logo />\r\n                        <Rank\r\n                            name={user.name}\r\n                            entries={user.entries}\r\n                        />\r\n                        <ImageLinkForm\r\n                            onInputChange={onInputChange}\r\n                            onButtonSubmit={this.onButtonSubmit}\r\n                        />\r\n                        <FaceRecognition box={box} imageUrl={imageUrl} />\r\n                    </div>\r\n                    : (\r\n                        route === 'signin'\r\n                            ? <Signin loadUser={loadUser} onRouteChange={this.onRouteChange}/>\r\n                            : <Register loadUser={loadUser} onRouteChange={this.onRouteChange}/>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport { inputLoad, imageUrlLoad, boxDetails, userInfo, signInInfo, registerInfo } from './containers/reducers';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers(\r\n    {\r\n        inputLoad, imageUrlLoad, boxDetails, userInfo, signInInfo, registerInfo\r\n    }\r\n);\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}